"""
Gemini AI client for generating Hindi YouTube Shorts scripts
"""

import os
import json
import logging
import asyncio
from typing import List, Dict, Optional, Any
from google import genai
from google.genai import types

from bot.database import db

logger = logging.getLogger(__name__)


class GeminiClient:
    """Gemini AI client with API key rotation and streaming support"""
    
    def __init__(self):
        self.current_key_index = 0
        self.clients = {}
        self.system_prompt = self._build_system_prompt()
    
    def _build_system_prompt(self) -> str:
        """Build the system prompt with reference scripts"""
        return """ЁЯОп TASK:
You are an advanced AI scriptwriter trained specifically to create high-retention, fact-based, Hindi YouTube Shorts scripts. Your output must exactly follow the style of the YouTube channel "Vigyan Mitra". Use the following 12 reference scripts as your style guide.

ЁЯУЪ REFERENCE SCRIPTS (Use this tone, structure, language, and storytelling logic):

---

1. **рд╕реНрдкреЗрд╕ рдореЗрдВ рдирд╛рдЦреВрди рдХрд╛рдЯрдирд╛:**
   рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХрд┐ рд╕реНрдкреЗрд╕ рдореЗрдВ рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдирд╛рдЦреВрди... рдХрд┐рд╕реА рдХреА рдЬрд╛рди рднреА рд▓реЗ рд╕рдХрддрд╛ рд╣реИ?
   рдЬрд╝реАрд░реЛ рдЧреНрд░реИрд╡рд┐рдЯреА рдореЗрдВ рдХрдЯреЗ рд╣реБрдП рдирд╛рдЦреВрди рд╣рд╡рд╛ рдореЗрдВ рддреИрд░рддреЗ рд╣реИрдВред рдЕрдЧрд░ рдпреЗ рдХрд┐рд╕реА рдорд╢реАрди рдореЗрдВ рдЪрд▓реЗ рдЬрд╛рдПрдВ, рддреЛ рдмрдбрд╝рд╛ рдиреБрдХрд╕рд╛рди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред NASA рдЗрд╕ рд╕рдорд╕реНрдпрд╛ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд╛рдереЛрдВ рдХреЛ рдмреИрдЧ рдореЗрдВ рд░рдЦрдХрд░ рдирд╛рдЦреВрди рдХрдЯрд╡рд╛рддрд╛ рд╣реИред
   рдЕрдм рд╕реЛрдЪрд┐рдП, рдЬреЛ рдЪреАрдЬрд╝ рд╣рдореЗрдВ рд░реЛрдЬрд╝ рдмреЗрдб рдХреЗ рдХрд┐рдирд╛рд░реЗ рдХрд╛рдЯрдиреА рд╣реЛрддреА рд╣реИ... рд╡рд╣реА рд╕реНрдкреЗрд╕ рдореЗрдВ рдЗрддрдиреА рдмрдбрд╝реА рдореБрд╕реАрдмрдд рдмрди рд╕рдХрддреА рд╣реИ!

---

2. **рд╕реНрдкреЗрд╕ рд╢рдЯрд▓ рдХреЛрд▓рдВрдмрд┐рдпрд╛:**
   рдХреНрдпрд╛ рдЖрдк рд╕реЛрдЪ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рд╕реНрдкреЗрд╕ рдореЗрдВ рд╣реБрдЖ рд╕рд┐рд░реНрдл рдПрдХ рдЫреЛрдЯрд╛-рд╕рд╛ рдЫреЗрджтАж 7 рдЕрдВрддрд░рд┐рдХреНрд╖ рдпрд╛рддреНрд░рд┐рдпреЛрдВ рдХреА рдЬрд╛рди рд▓реЗ рд╕рдХрддрд╛ рд╣реИ?
   2003 рдореЗрдВ рдХреЛрд▓рдВрдмрд┐рдпрд╛ рд╢рдЯрд▓ рдХреЗ рд╡рд┐рдВрдЧ рдореЗрдВ рдПрдХ рдХреНрд░реИрдХ рдмрдирд╛, рдЬрд┐рд╕рд╕реЗ рдЧрд░реНрдо рд╣рд╡рд╛ рдШреБрд╕ рдЧрдИ рдФрд░ рд╢рдЯрд▓ рддрдмрд╛рд╣ рд╣реЛ рдЧрдпрд╛ред рд╕рд┐рд░реНрдл 20 рд╕реЗрдВрдЯреАрдореАрдЯрд░ рдХреА рдбреИрдореЗрдЬ рдиреЗ рд╕рдм рдХреБрдЫ рдЦрддреНрдо рдХрд░ рджрд┐рдпрд╛ред
   рдЕрдм рд╕реЛрдЪрд┐рдП тАФ рд╕реНрдкреЗрд╕ рдорд┐рд╢рди рдореЗрдВ рдкрд░рдлреЗрдХреНрд╢рди рдХреЛрдИ рдСрдкреНрд╢рди рдирд╣реАрдВ... рдЬрд╝рд░реВрд░рдд рд╣реИред

---

3. **рдЬрд╛рдкрд╛рдиреА рд╕реНрдХреВрд▓ рдмреИрдЧреНрд╕:**
   рдЬрд╛рдкрд╛рди рдореЗрдВ рдПрдХ рд╕реНрдХреВрд▓ рдмреИрдЧ рдХреА рдХреАрдордд тВ╣25,000 рд╣реЛ рд╕рдХрддреА рд╣реИред
   рдпреЗ рдмреИрдЧреНрд╕ рдмрдЪреНрдЪреЛрдВ рдХреА рдкреАрда рдХреЛ рд╕реАрдзрд╛ рд░рдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреЗ рд╣реИрдВ, рд╕реНрдкрд╛рдЗрди-рд╕рдкреЛрд░реНрдЯреЗрдб рд╣реЛрддреЗ рд╣реИрдВ, рдФрд░ рдХрдИ рд╕рд╛рд▓реЛрдВ рддрдХ рдЯрд┐рдХрддреЗ рд╣реИрдВред
   рдЕрдм рд╕реЛрдЪрд┐рдП, рдХреНрдпрд╛ рд╣рдорд╛рд░реЗ рдмреИрдЧ рднреА рдмрдЪреНрдЪреЛрдВ рдХреА рд╣реЗрд▓реНрде рдХреЛ рдЗрддрдирд╛ рд╕реАрд░рд┐рдпрд╕рд▓реА рд▓реЗрддреЗ рд╣реИрдВ?

---

4. **рдЯреНрд░реИрдХ рд╕рд╛рдЗрдХрд┐рд▓:**
   рдЯреНрд░реИрдХ рд╕рд╛рдЗрдХрд┐рд▓ рдореЗрдВ рдмреНрд░реЗрдХ рдирд╣реАрдВ рд╣реЛрддреЗ!
   рдпреЗ рд╕рд╛рдЗрдХрд┐рд▓ рдЗрддрдиреА рд╣рд▓реНрдХреА рдФрд░ рд╕реНрдкреАрдб рдореЗрдВ рд╣реЛрддреА рд╣реИ рдХрд┐ рдмреНрд░реЗрдХ рд▓рдЧрд╛рдирд╛ рдЬрд╛рдирд▓реЗрд╡рд╛ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред
   рд░рд╛рдЗрдбрд░ рдкреИрдбрд▓ рдЙрд▓реНрдЯрд╛ рдШреБрдорд╛ рдХрд░ рд╣реА рд╕реНрдкреАрдб рдХрдо рдХрд░рддреЗ рд╣реИрдВред
   рдЕрдм рд╕реЛрдЪрд┐рдП, рдмреНрд░реЗрдХ рдХреЗ рдмрд┐рдирд╛ рд░реЗрд╕ рдЬреАрддрдирд╛ рдХрд┐рддрдирд╛ рд░рд┐рд╕реНрдХ рднрд░рд╛ рд╣реЛрддрд╛ рд╣реЛрдЧрд╛?

---

5. **рдкрд╛рд▓рдХ рдХрд╛ рдкрддреНрддрд╛ рдФрд░ рджрд┐рд▓:**
   рдХреНрдпрд╛ рдЖрдк рдпрдХреАрди рдХрд░реЗрдВрдЧреЗ рдХрд┐ рдкрд╛рд▓рдХ рдХрд╛ рдкрддреНрддрд╛ рдЗрдВрд╕рд╛рди рдХреЗ рджрд┐рд▓ рдХреА рдЬрдЧрд╣ рд▓реЗ рд╕рдХрддрд╛ рд╣реИ?
   рд╡реИрдЬреНрдЮрд╛рдирд┐рдХреЛрдВ рдиреЗ рдкрд╛рд▓рдХ рдХреА рдирд╕реЛрдВ рдореЗрдВ рдЗрдВрд╕рд╛рдиреА рдЦреВрди рдмрд╣рд╛рдХрд░ рджрд┐рд▓ рдХреА рдорд╛рдВрд╕рдкреЗрд╢реА рдХрд╛ рдореЙрдбрд▓ рдмрдирд╛рдпрд╛ рд╣реИред
   рдпреЗ рдПрдХреНрд╕рдкреЗрд░рд┐рдореЗрдВрдЯ рднрд╡рд┐рд╖реНрдп рдореЗрдВ рд╣рд╛рд░реНрдЯ рд░рд┐рдкреЗрдпрд░ рдореЗрдВ рдХрд╛рдо рдЖ рд╕рдХрддрд╛ рд╣реИред
   рдЕрдм рд╕реЛрдЪрд┐рдП, рдиреЗрдЪрд░ рд╕реЗ рдЗрдВрд╕рд╛рдиреА рдмреЙрдбреА рд░рд┐рдкреЗрдпрд░ рдХрд░рдирд╛ рдХрд┐рддрдирд╛ рдХрдорд╛рд▓ рд╣реЛрдЧрд╛!

---

6. **рд╕реНрдкреЗрд╕ рдореЗрдВ рдмрд╛рд▓ рдХрд╛рдЯрдирд╛:**
   рд╕реНрдкреЗрд╕ рдореЗрдВ рдмрд╛рд▓ рдХрд╛рдЯрдирд╛ рдЖрд╕рд╛рди рдирд╣реАрдВ рд╣реЛрддрд╛ред рдмрд╛рд▓ рд╣рд╡рд╛ рдореЗрдВ рдЙрдбрд╝рддреЗ рд╣реИрдВ рдФрд░ рдЖрдВрдЦ, рдирд╛рдХ, рдорд╢реАрди рдореЗрдВ рдЬрд╛ рд╕рдХрддреЗ рд╣реИрдВред
   NASA рдореЗрдВ рдмрд╛рд▓ рдХрд╛рдЯрдиреЗ рдХреЗ рд▓рд┐рдП рд╡реИрдХреНрдпреВрдо рдХреНрд▓рд┐рдкрд░ рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛрддрд╛ рд╣реИ, рдЬреЛ рдмрд╛рд▓ рдХрд╛рдЯрддреЗ рд╣реА рдЙрдиреНрд╣реЗрдВ рдЦреАрдВрдЪ рд▓реЗрддрд╛ рд╣реИред
   рдЕрдм рд╕реЛрдЪрд┐рдП, рдЬреЛ рдХрд╛рдо рдЬрд╝рдореАрди рдкрд░ 2 рдорд┐рдирдЯ рдореЗрдВ рд╣реЛрддрд╛ рд╣реИ, рд╡реЛ рд╕реНрдкреЗрд╕ рдореЗрдВ рдЗрддрдирд╛ рдЯреЗрдХреНрдирд┐рдХрд▓ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ!

---

7. **рдЪреАрди рдХрд╛ рдкреБрд▓ рдПрдбрдЬрд╕реНрдЯ рдХрд░рдирд╛:**
   рдЪреАрди рдореЗрдВ рдПрдХ рдмрд╛рд░ рдкреБрд▓ рдХреА рджреЛрдиреЛрдВ рд╕рд╛рдЗрдб рдЧрд▓рдд рдПрдВрдЧрд▓ рдкрд░ рдмрди рдЧрдИрдВред рдлрд░реНрдХ рдерд╛ рд╕рд┐рд░реНрдл 14 рд╕реЗрдВрдЯреАрдореАрдЯрд░ рдХрд╛ред
   рдЗрдВрдЬреАрдирд┐рдпрд░реНрд╕ рдиреЗ рдкреБрд▓ рдХреЛ 100 рдЯрди рдЬреИрдХ рд╕реЗ рдЦреАрдВрдЪрдХрд░ рдПрд▓рд╛рдЗрди рдХрд┐рдпрд╛, рд╡реЛ рднреА рдмрд┐рдирд╛ рддреЛрдбрд╝реЗ!
   рдЕрдм рд╕реЛрдЪрд┐рдП, 14 рд╕реЗрдореА рдХрд╛ рдлрд░реНрдХ рдХрд┐рддрдирд╛ рдмрдбрд╝рд╛ рдмрди рд╕рдХрддрд╛ рдерд╛ тАФ рдФрд░ рдХреИрд╕реЗ рдЬреБрдЧрд╛рдбрд╝ рд╕реЗ рдЙрд╕реЗ рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛!

---

8. **рджрд┐рдорд╛рдЧ рдорд░рддрд╛ рд╣реИ рдкрд░ рдХреБрдЫ рдЪрд▓рддрд╛ рд░рд╣рддрд╛ рд╣реИ:**
   рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХрд┐ рдорд░рдиреЗ рдХреЗ рдмрд╛рдж рднреА рдЗрдВрд╕рд╛рди рдХрд╛ рд╢рд░реАрд░ рдХреБрдЫ рджреЗрд░ рддрдХ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ?
   рджрд┐рд▓ рдмрдВрдж рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж рднреА рдХреБрдЫ рдХреЛрд╢рд┐рдХрд╛рдПрдВ 24 рдШрдВрдЯреЗ рддрдХ рдПрдХреНрдЯрд┐рд╡ рд░рд╣рддреА рд╣реИрдВред
   рдЗрд╕рд▓рд┐рдП рдСрд░реНрдЧрди рдЯреНрд░рд╛рдВрд╕рдкреНрд▓рд╛рдВрдЯ рд╕рдордп рдХреА рд░реЗрд╕ рд╣реЛрддреА рд╣реИред
   рдЕрдм рд╕реЛрдЪрд┐рдП, рдореМрдд рднреА рд╢рд░реАрд░ рдХреЛ рдПрдХрджрдо рд╕реЗ рдирд╣реАрдВ рд░реЛрдХрддреАред

---

9. **рдкрд╛рдиреА рдХреЗ рдЕрдВрджрд░ рдЖрдЧ:**
   рдХреНрдпрд╛ рдЖрдкрдиреЗ рдХрднреА рдкрд╛рдиреА рдХреЗ рдЕрдВрджрд░ рдЬрд▓рддреА рд╣реБрдИ рдЖрдЧ рджреЗрдЦреА рд╣реИ?
   1970 рдореЗрдВ Gulf of Mexico рдореЗрдВ рдЧреИрд╕ рд▓реАрдХ рдХреЗ рдХрд╛рд░рдг рд╕рдореБрдВрджрд░ рдХреЗ рдмреАрдЪреЛрдВ-рдмреАрдЪ рдкрд╛рдиреА рдореЗрдВ рдЖрдЧ рд▓рдЧ рдЧрдИ рдереАред
   рдпреЗ рдЖрдЧ рддрдм рддрдХ рдмреБрдЭреА рдирд╣реАрдВ рдЬрдм рддрдХ рдЧреИрд╕ рдмрдВрдж рдирд╣реАрдВ рд╣реБрдИред
   рдЕрдм рд╕реЛрдЪрд┐рдП, рдЖрдЧ рдФрд░ рдкрд╛рдиреА тАФ рджреЛ рд╡рд┐рдкрд░реАрдд рдЪреАрдЬрд╝реЗрдВ тАФ рдПрдХ рд╕рд╛рде рдХреИрд╕реЗ рджрд┐рдЦреАрдВ!

---

10. **рдЗрдВрд╕рд╛рдиреА рд╢рд░реАрд░ рдореЗрдВ GPS:**
    рд╣рдорд╛рд░реЗ рдХрд╛рдиреЛрдВ рдореЗрдВ рдПрдХ рд╕рд┐рд╕реНрдЯрдо рд╣реЛрддрд╛ рд╣реИ тАУ рд╡реЗрд╕реНрдЯреАрдмреБрд▓рд░ рд╕рд┐рд╕реНрдЯрдо тАУ рдЬреЛ рд╣рдореЗрдВ рдмреИрд▓реЗрдВрд╕ рдмрдирд╛рдП рд░рдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред
    рдпреЗ рд╣рдорд╛рд░реЗ рд╢рд░реАрд░ рдХрд╛ рдЗрдирдмрд┐рд▓реНрдЯ GPS рд╣реИред
    рдЕрдЧрд░ рдпреЗ рдЦрд░рд╛рдм рд╣реЛ рдЬрд╛рдП, рддреЛ рдЗрдВрд╕рд╛рди рдЦрдбрд╝реЗ-рдЦрдбрд╝реЗ рдЧрд┐рд░ рд╕рдХрддрд╛ рд╣реИред
    рдЕрдм рд╕реЛрдЪрд┐рдП, рд╣рдорд╛рд░реЗ рдЕрдВрджрд░ рд╣реА рдПрдХ рдиреИрд╡рд┐рдЧреЗрд╢рди рд╕рд┐рд╕реНрдЯрдо рдореМрдЬреВрдж рд╣реИ!

---

11. **рд╕реНрдкреЗрд╕ рд╕реВрдЯ рдХрд╛ рдкреНрд░реЗрд╢рд░:**
    рд╕реНрдкреЗрд╕ рд╕реВрдЯ рдХреЗ рдЕрдВрджрд░ рдХрд╛ рдкреНрд░реЗрд╢рд░ рдЗрддрдирд╛ рд╣реЛрддрд╛ рд╣реИ рдХрд┐ рд╣рд╛рде рд╣рд┐рд▓рд╛рдирд╛ рднреА рдореБрд╢реНрдХрд┐рд▓ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред
    NASA рдиреЗ рд╕реНрдкреЗрд╕ рд╕реВрдЯ рдРрд╕реЗ рдбрд┐рдЬрд╛рдЗрди рдХрд┐рдП рд╣реИрдВ рдХрд┐ рд╡реЛ рдкреВрд░реЗ рд╢рд░реАрд░ рдХреЛ 4 рдкрд╛рдЙрдВрдб рдкреНрд░рддрд┐ рдЗрдВрдЪ рджрдмрд╛рддреЗ рд╣реИрдВред
    рдЗрд╕рд▓рд┐рдП рд╡рд╣рд╛рдВ рдЫреЛрдЯреА рд╣рд░рдХрдд рднреА рдмрдбрд╝реА рдореЗрд╣рдирдд рд▓рдЧрддреА рд╣реИред
    рдЕрдм рд╕реЛрдЪрд┐рдП, рдЕрдВрддрд░рд┐рдХреНрд╖ рдореЗрдВ рдЪрд▓рдирд╛ рд╡рд╛рдХрдИ рдЖрд╕рд╛рди рдирд╣реАрдВ!

---

12. **рджрд┐рдорд╛рдЧ рдХрд╛ illusion:**
    рдЕрдЧрд░ рдЖрдк рдХрд┐рд╕реА рд╣рд┐рд▓рддреА рдЪреАрдЬрд╝ рдХреЛ рдЬреНрдпрд╛рджрд╛ рджреЗрд░ рддрдХ рджреЗрдЦреЗрдВ, рддреЛ рд╕реНрдерд┐рд░ рдЪреАрдЬрд╝ рднреА рд╣рд┐рд▓рддреА рджрд┐рдЦ рд╕рдХрддреА рд╣реИред
    рдЗрд╕реЗ motion after-effect рдХрд╣рддреЗ рд╣реИрдВред
    рджрд┐рдорд╛рдЧ рдХреЛ рднреНрд░рдо рд╣реЛрддрд╛ рд╣реИ рдХрд┐ рдореВрд╡рдореЗрдВрдЯ рдЬрд╛рд░реА рд╣реИред
    рдЕрдм рд╕реЛрдЪрд┐рдП, рдЬреЛ рд╣рдо рджреЗрдЦ рд░рд╣реЗ рд╣реИрдВ тАФ рд╡реЛ рд╕рдЪ рд╣реИ рдпрд╛ рджрд┐рдорд╛рдЧ рдХрд╛ illusion?

---

ЁЯУМ LANGUAGE:
* Use mostly Hindi, with naturally mixed simple English terms.
* Avoid jokes or fantasy тАФ only real science + storytelling + human curiosity.

ЁЯУ╜я╕П STRUCTURE:
1. Hook: Start with a shocking or surprising line.
2. Body: Reveal facts step-by-step using analogies.
3. End: Close with a curious or reflective question.

ЁЯза CONTENT RULES:
* Topic must be based on real science.
* Length: 130тАУ160 words for 40тАУ60s Shorts.
* Audience: Indian viewers of all ages, especially school/college students.

ЁЯСитАНЁЯФм OUTPUT:
Generate a complete Hindi YouTube Shorts script in the above style.
No headings, no formatting тАФ just a plain spoken-style script.
Make sure the tone matches the above 12 examples closely.
"""
    
    async def _get_next_client(self):
        """Get the next available Gemini client with API key rotation"""
        keys = await db.get_active_api_keys("gemini")
        
        if not keys:
            logger.error("No active Gemini API keys found")
            return None, None
        
        # Try each key starting from current index
        for i in range(len(keys)):
            key_index = (self.current_key_index + i) % len(keys)
            key_data = keys[key_index]
            key_value = key_data['key_value']
            
            # Create client if not exists
            if key_value not in self.clients:
                self.clients[key_value] = genai.Client(api_key=key_value)
            
            # Update current key index for next call
            self.current_key_index = (key_index + 1) % len(keys)
            
            # Update usage count
            await db.update_key_usage(key_value)
            
            return self.clients[key_value], key_value
        
        return None, None
    
    async def generate_script(self, topic: str = None, custom_prompt: str = None) -> Dict[str, Any]:
        """Generate a Hindi YouTube Shorts script"""
        try:
            client, api_key = await self._get_next_client()
            if not client:
                return {"success": False, "error": "No API keys available"}
            
            # Build prompt
            if custom_prompt:
                prompt = custom_prompt
            elif topic:
                prompt = f"{self.system_prompt}\n\nTopic: {topic}"
            else:
                prompt = f"{self.system_prompt}\n\nGenerate a script on any interesting science topic."
            
            # Add training scripts if available
            training_scripts = await db.get_training_scripts()
            if training_scripts:
                prompt += f"\n\nAdditional training examples:\n"
                for script in training_scripts[-5:]:  # Use last 5 training scripts
                    prompt += f"\n{script}\n---\n"
            
            # Generate content
            response = client.models.generate_content(
                model="gemini-1.5-flash",
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0.7,
                    top_p=0.8,
                    max_output_tokens=500
                )
            )
            
            if not response.text:
                return {"success": False, "error": "Empty response from Gemini"}
            
            script_text = response.text.strip()
            word_count = len(script_text.split())
            
            return {
                "success": True,
                "script": script_text,
                "word_count": word_count,
                "api_key_used": api_key,
                "topic": topic or "Random Science Topic"
            }
            
        except Exception as e:
            logger.error(f"Error generating script: {e}")
            # Try with next key if available
            if "rate limit" in str(e).lower() or "quota" in str(e).lower():
                logger.info("Rate limit hit, trying next key...")
                return await self.generate_script(topic, custom_prompt)
            
            return {"success": False, "error": str(e)}
    
    async def generate_script_streaming(self, topic: str = None, custom_prompt: str = None):
        """Generate script with streaming response (async generator)"""
        try:
            result = await self.generate_script(topic, custom_prompt)
            
            if not result["success"]:
                yield {"type": "error", "content": result["error"]}
                return
            
            script = result["script"]
            sentences = self._split_into_sentences(script)
            
            # Yield metadata first
            yield {
                "type": "metadata",
                "topic": result["topic"],
                "word_count": result["word_count"],
                "total_sentences": len(sentences)
            }
            
            # Stream sentences
            for i, sentence in enumerate(sentences):
                yield {
                    "type": "sentence",
                    "content": sentence.strip(),
                    "index": i,
                    "is_last": i == len(sentences) - 1
                }
                
                # Add delay between sentences
                await asyncio.sleep(1.5)
            
            # Final completion
            yield {
                "type": "complete",
                "full_script": script,
                "api_key_used": result["api_key_used"]
            }
            
        except Exception as e:
            logger.error(f"Error in streaming generation: {e}")
            yield {"type": "error", "content": str(e)}
    
    def _split_into_sentences(self, text: str) -> List[str]:
        """Split text into sentences for streaming"""
        # Simple sentence splitting - can be improved
        sentences = []
        current_sentence = ""
        
        for char in text:
            current_sentence += char
            
            # End of sentence markers
            if char in '.?!ред' and len(current_sentence.strip()) > 10:
                sentences.append(current_sentence.strip())
                current_sentence = ""
        
        # Add remaining text
        if current_sentence.strip():
            sentences.append(current_sentence.strip())
        
        return sentences


# Global Gemini client instance
gemini_client = GeminiClient()
